// src/services/healthService.// --- iOS: HealthKit 初期化 & 権限リクエスト ---
export function initHealthKit(): Promise<void> {
  const permissions: HealthKitPermissions = {
    permissions: {
      read: [
        AppleHealthKit.Constants.Permissions.StepCount,
        AppleHealthKit.Constants.Permissions.Weight,
      ],
      write: [],  // 書き込み権限が不要なら空配列
    },
  };
  return new Promise((resolve, reject) => {
    AppleHealthKit.initHealthKit(permissions, (error: string) => {
      if (error) {
        reject(new Error(error));
      } else {
        resolve();
      }
    });
  });
}Modules } from 'react-native';
import AppleHealthKit, {
  HealthValue,
  HealthKitPermissions,
} from 'react-native-health';
// --- バグ回避のパッチ: ネイティブ実装を JS モジュールに紐づける ---
const { AppleHealthKit: RnAppleHealthKit } = NativeModules;
if (RnAppleHealthKit && typeof AppleHealthKit.initHealthKit !== 'function') {
  // 必要なメソッドをすべて注入
  for (const key of Object.keys(RnAppleHealthKit)) {
    // @ts-ignore
    AppleHealthKit[key] = RnAppleHealthKit[key];
  }
}
import GoogleFit, { Scopes } from 'react-native-google-fit';

// Type definitions for Google Fit response
interface StepSample {
  startDate: string;
  endDate: string;
  value: number;
}

interface StepSource {
  source: string;
  steps: StepSample[];
}


// --- iOS: HealthKit 初期化 & 権限リクエスト ---
export function initHealthKit(): Promise<void> {
  const permissions: HealthKitPermissions = {
    permissions: {
      read: ['StepCount', 'BodyMass'],  // 読み込みたいデータタイプ
      write: [],                        // 書き込み権限が不要なら空配列
    },
  };
  return new Promise((resolve, reject) => {
    AppleHealthKit.initHealthKit(permissions, (error: string) => {
      if (error) {
        reject(new Error(error));
      } else {
        resolve();
      }
    });
  });
}

// --- iOS: 当日の歩数取得 ---
export function getTodayStepsIOS(): Promise<number> {
  const start = new Date();
  start.setHours(0, 0, 0, 0);
  const options = { startDate: start.toISOString(), endDate: new Date().toISOString() };
  return new Promise((resolve, reject) => {
    AppleHealthKit.getStepCount(options, (err: string, result: HealthValue) => {
      if (err) {
        reject(new Error(err));
      } else {
        resolve(result.value || 0);
      }
    });
  });
}

// --- Android: Google Fit 初期化 & 権限リクエスト ---
export async function initGoogleFit(): Promise<void> {
  const options = {
    scopes: [Scopes.FITNESS_ACTIVITY_READ, Scopes.FITNESS_BODY_READ],
  };
  
  try {
    const authorized = await GoogleFit.authorize(options);
    if (!authorized.success) {
      throw new Error('Google Fit 認証に失敗しました');
    }
  } catch (error) {
    console.error('Google Fit authorization error:', error);
    throw new Error('Google Fit の接続でエラーが発生しました');
  }
}

// --- Android: 当日の歩数取得 ---
export async function getTodayStepsAndroid(): Promise<number> {
  const start = new Date();
  start.setHours(0, 0, 0, 0);
  const end = new Date();
  
  try {
    const res = await GoogleFit.getDailyStepCountSamples({
      startDate: start.toISOString(),
      endDate: end.toISOString()
    });
    
    // Google Fitからのデータを確認
    console.log('Google Fit steps data:', JSON.stringify(res));
    
    // まず com.google.android.gms.fitness.app.fitnessstats のデータを探す（最も正確）
    let stepsData = res.find(source => source.source === 'com.google.android.gms.fitness.app.fitnessstats');
    
    // なければ他のソースを確認
    if (!stepsData || !stepsData.steps || stepsData.steps.length === 0) {
      stepsData = res.find(source => source.steps && source.steps.length > 0);
    }
    
    // データが見つかればその値を、なければ0を返す
    return stepsData?.steps?.[0]?.value || 0;
  } catch (error) {
    console.error('Google Fit steps error:', error);
    throw new Error('歩数データの取得に失敗しました');
  }
}
