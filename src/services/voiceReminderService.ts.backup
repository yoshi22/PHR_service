import * as Notifications from 'expo-notifications';
// import * as Location from 'expo-location';
// import * as TaskManager from 'expo-task-manager';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as voiceService from './voiceService'; * as Notifications from 'expo-notifications';
import * as Location from 'expo-location';
import * as TaskManager from 'expo-task-manager';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { speakText } from './voiceService';

// Constants
const EXERCISE_REMINDER_MORNING_ID = 'exercise-reminder-morning';
const EXERCISE_REMINDER_EVENING_ID = 'exercise-reminder-evening';
const LOCATION_TASK_NAME = 'background-location-task';
const EXERCISE_REMINDER_ENABLED_KEY = 'exercise_reminder_enabled';
const HOME_LOCATION_KEY = 'user_home_location';

// Initialize voice notification settings
export async function initializeVoiceReminders(): Promise<void> {
  try {
    // Check if reminders are enabled
    const enabled = await getVoiceReminderSettings();
    
    if (enabled) {
      // Schedule standard time-based reminders
      await scheduleExerciseReminders(true);
      
      // Request location permissions for context-aware reminders if needed
      const locationPermission = await checkLocationPermission();
      if (locationPermission) {
        await startLocationTracking();
      }
    }
  } catch (error) {
    console.error('Error initializing voice reminders:', error);
  }
}

// Get current voice reminder settings
export async function getVoiceReminderSettings(): Promise<boolean> {
  try {
    const settings = await AsyncStorage.getItem(EXERCISE_REMINDER_ENABLED_KEY);
    return settings === null ? true : JSON.parse(settings);
  } catch (error) {
    console.error('Error getting voice reminder settings:', error);
    return false;
  }
}

// Update voice reminder settings
export async function updateVoiceReminderSettings(enabled: boolean): Promise<void> {
  try {
    await AsyncStorage.setItem(EXERCISE_REMINDER_ENABLED_KEY, JSON.stringify(enabled));
    
    // Update scheduled reminders
    await scheduleExerciseReminders(enabled);
    
    // Update location tracking
    if (enabled) {
      const locationPermission = await checkLocationPermission();
      if (locationPermission) {
        await startLocationTracking();
      }
    } else {
      await stopLocationTracking();
    }
  } catch (error) {
    console.error('Error updating voice reminder settings:', error);
    throw new Error('設定の更新に失敗しました');
  }
}

// Schedule time-based exercise reminders
export async function scheduleExerciseReminders(enabled: boolean): Promise<void> {
  try {
    // Cancel any existing reminders
    await Notifications.cancelScheduledNotificationAsync(EXERCISE_REMINDER_MORNING_ID);
    await Notifications.cancelScheduledNotificationAsync(EXERCISE_REMINDER_EVENING_ID);
    
    if (!enabled) return;
    
    // Schedule morning reminder (7:00 AM)
    await Notifications.scheduleNotificationAsync({
      identifier: EXERCISE_REMINDER_MORNING_ID,
      content: {
        title: '朝のエクササイズの時間です',
        body: '1日を活発に始めましょう。軽いストレッチや運動が気分を良くします。',
        sound: true,
        data: { type: 'morning_exercise' },
      },
      trigger: {
        hour: 7,
        minute: 0,
        repeats: true,
      },
    });
    
    // Schedule evening reminder (6:00 PM)
    await Notifications.scheduleNotificationAsync({
      identifier: EXERCISE_REMINDER_EVENING_ID,
      content: {
        title: '夕方のエクササイズの時間です',
        body: '今日の疲れをリセットしましょう。軽い運動が睡眠の質を向上させます。',
        sound: true,
        data: { type: 'evening_exercise' },
      },
      trigger: {
        hour: 18,
        minute: 0,
        repeats: true,
      },
    });
  } catch (error) {
    console.error('Error scheduling exercise reminders:', error);
    throw error;
  }
}

// Set home location for context-aware reminders
export async function setHomeLocation(): Promise<boolean> {
  try {
    // Get permission first
    const { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      console.log('Location permission denied');
      return false;
    }
    
    // Get current location
    const location = await Location.getCurrentPositionAsync({});
    
    // Store home location
    await AsyncStorage.setItem(
      HOME_LOCATION_KEY, 
      JSON.stringify({
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      })
    );
    
    return true;
  } catch (error) {
    console.error('Error setting home location:', error);
    return false;
  }
}

// Check if location permission is granted
async function checkLocationPermission(): Promise<boolean> {
  const { status } = await Location.requestForegroundPermissionsAsync();
  return status === 'granted';
}

// Start location tracking for context-aware reminders
async function startLocationTracking(): Promise<void> {
  try {
    // Register background task
    TaskManager.defineTask(LOCATION_TASK_NAME, async ({ data, error }) => {
      if (error) {
        console.error('Location task error:', error);
        return;
      }
      
      const enabled = await getVoiceReminderSettings();
      if (!enabled) return;
      
      const { locations } = data as { locations: Array<Location.LocationObject> };
      const location = locations[0];
      
      // Check if user is at home
      const isAtHome = await checkIfUserIsAtHome(location.coords);
      
      if (isAtHome) {
        // Check if it's morning or evening
        const hour = new Date().getHours();
        
        // Morning reminder (6-9 AM)
        if (hour >= 6 && hour < 9) {
          await showVoiceExerciseReminder('morning');
        }
        // Evening reminder (5-8 PM)
        else if (hour >= 17 && hour < 20) {
          await showVoiceExerciseReminder('evening');
        }
      }
    });
    
    // Start location updates
    await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
      accuracy: Location.Accuracy.Balanced,
      timeInterval: 900000, // 15 minutes
      distanceInterval: 100, // 100 meters
      foregroundService: {
        notificationTitle: 'PHRアプリが位置情報を使用しています',
        notificationBody: '自宅でのエクササイズリマインダーに使用されます',
      },
    });
  } catch (error) {
    console.error('Error starting location tracking:', error);
  }
}

// Stop location tracking
async function stopLocationTracking(): Promise<void> {
  try {
    const isRegistered = await TaskManager.isTaskRegisteredAsync(LOCATION_TASK_NAME);
    if (isRegistered) {
      await Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME);
    }
  } catch (error) {
    console.error('Error stopping location tracking:', error);
  }
}

// Check if user is at home
async function checkIfUserIsAtHome(coords: Location.LocationObjectCoords): Promise<boolean> {
  try {
    // Get stored home location
    const homeLocationStr = await AsyncStorage.getItem(HOME_LOCATION_KEY);
    if (!homeLocationStr) return false;
    
    const homeLocation = JSON.parse(homeLocationStr) as {
      latitude: number;
      longitude: number;
    };
    
    // Calculate distance
    const distance = calculateDistance(
      coords.latitude,
      coords.longitude,
      homeLocation.latitude,
      homeLocation.longitude
    );
    
    // Consider user at home if within 100 meters
    return distance <= 0.1;
  } catch (error) {
    console.error('Error checking if user is at home:', error);
    return false;
  }
}

// Calculate distance between two coordinates using Haversine formula
// Returns distance in kilometers
function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
  const R = 6371; // Radius of the earth in km
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
  return R * c; // Distance in km
}

function deg2rad(deg: number): number {
  return deg * (Math.PI/180);
}

// Show voice exercise reminder
async function showVoiceExerciseReminder(timeOfDay: 'morning' | 'evening'): Promise<void> {
  try {
    const reminderTexts = {
      morning: [
        '朝のエクササイズの時間です。1日を活発に始めましょう。',
        '簡単なストレッチから始めて、体を目覚めさせましょう。',
        '朝の軽い運動は代謝を活性化させ、一日中エネルギッシュに過ごせます。'
      ],
      evening: [
        '夕方のエクササイズの時間です。今日の疲れをリセットしましょう。',
        'リラックスしたストレッチで体の緊張をほぐしましょう。',
        '軽い運動で心身をリフレッシュし、良質な睡眠を促しましょう。'
      ]
    };
    
    // Get random reminder text
    const texts = reminderTexts[timeOfDay];
    const randomIndex = Math.floor(Math.random() * texts.length);
    const reminderText = texts[randomIndex];
    
    // Show notification
    await Notifications.scheduleNotificationAsync({
      content: {
        title: timeOfDay === 'morning' ? '朝のエクササイズの時間です' : '夕方のエクササイズの時間です',
        body: reminderText,
        sound: true,
        data: { type: `${timeOfDay}_exercise` },
      },
      trigger: null, // Send immediately
    });
    
    // Speak the reminder
    await speakText(reminderText);
    
  } catch (error) {
    console.error('Error showing voice exercise reminder:', error);
  }
}
