// src/services/healthService.ts
import { NativeModules, Platform } from 'react-native';
import AppleHealthKit, {
  HealthValue,
  HealthKitPermissions,
} from 'react-native-health';
import GoogleFit, { Scopes } from 'react-native-google-fit';
import AsyncStorage from '@react-native-async-storage/async-storage';

const PERMISSIONS_KEY = 'health_permissions_granted';

// --- バグ回避のパッチ: ネイティブ実装を JS モジュールに紐づける ---
const { AppleHealthKit: RnAppleHealthKit } = NativeModules;
if (RnAppleHealthKit && typeof AppleHealthKit.initHealthKit !== 'function') {
  // 必要なメソッドをすべて注入
  for (const key of Object.keys(RnAppleHealthKit)) {
    // @ts-ignore
    AppleHealthKit[key] = RnAppleHealthKit[key];
  }
}

// Type definitions for Google Fit response
interface GoogleFitStepSample {
  date: string;
  value: number;
}

interface StepsResponse {
  source: string;
  steps: GoogleFitStepSample[];
}

/**
 * Check if health permissions are granted
 */
export async function checkPermissions(): Promise<boolean> {
  try {
    console.log('Checking health permissions...');
    
    // Check stored permission state first
    const storedValue = await AsyncStorage.getItem(PERMISSIONS_KEY);
    console.log('Stored permission value:', storedValue);
    
    if (storedValue === 'true') {
      console.log('Found stored permission: true');
      return true;
    }
    
    // If no stored permission, try to actively check
    if (Platform.OS === 'ios') {
      try {
        // On iOS, we can try to access health data and see if it works
        console.log('Checking iOS health permissions actively');
        const permissions = {
          permissions: {
            read: [AppleHealthKit.Constants.Permissions.StepCount],
            write: [],
          },
        };
        
        // Use a Promise wrapper around the callback API
        const permissionResult = await new Promise<boolean>((resolve) => {
          AppleHealthKit.isHealthDataAvailable((err: string) => {
            if (err) {
              console.log('Health data is not available:', err);
              resolve(false);
            } else {
              console.log('Health data is available');
              resolve(true);
            }
          });
        });
        
        if (permissionResult) {
          console.log('Health data is available, setting storage');
          await AsyncStorage.setItem(PERMISSIONS_KEY, 'true');
          return true;
        }
      } catch (err) {
        console.error('Error checking iOS health permissions:', err);
      }
    } else {
      // Android
      try {
        console.log('Checking Android health permissions actively');
        const authResult = await GoogleFit.checkIsAuthorized();
        console.log('Google Fit auth result:', authResult);
        
        // Google Fit's success property indicates permissions
        if (authResult && authResult.success === true) {
          console.log('Google Fit is authorized, setting storage');
          await AsyncStorage.setItem(PERMISSIONS_KEY, 'true');
          return true;
        }
      } catch (err) {
        console.error('Error checking Android health permissions:', err);
      }
    }
    
    // If we get here, no permissions are granted
    console.log('No health permissions detected');
    return false;
  } catch (error) {
    console.error('Error in checkPermissions():', error);
    return false;
  }
}

// --- iOS: HealthKit 初期化 & 権限リクエスト ---
export function initHealthKit(): Promise<void> {
  const permissions: HealthKitPermissions = {
    permissions: {
      read: [
        AppleHealthKit.Constants.Permissions.StepCount,
        AppleHealthKit.Constants.Permissions.Weight,
      ],
      write: [],  // 書き込み権限が不要なら空配列
    },
  };
  return new Promise((resolve, reject) => {
    AppleHealthKit.initHealthKit(permissions, (error: string) => {
      if (error) {
        reject(new Error(error));
      } else {
        // Store that permissions were granted
        AsyncStorage.setItem(PERMISSIONS_KEY, 'true')
          .catch(err => console.error('Error storing permission status:', err));
        resolve();
      }
    });
  });
}

// --- iOS: 当日の歩数取得 ---
export function getTodayStepsIOS(): Promise<number> {
  const start = new Date();
  start.setHours(0, 0, 0, 0);
  const options = { 
    startDate: start.toISOString(), 
    endDate: new Date().toISOString() 
  };
  
  return new Promise((resolve, reject) => {
    AppleHealthKit.getStepCount(options, (err: string, result: HealthValue) => {
      if (err) {
        reject(new Error(err));
      } else {
        resolve(result.value || 0);
      }
    });
  });
}

// --- Android: Google Fit 初期化 & 権限リクエスト ---
export async function initGoogleFit(): Promise<void> {
  const options = {
    scopes: [
      Scopes.FITNESS_ACTIVITY_READ,
      Scopes.FITNESS_BODY_READ
    ],
  };
  
  try {
    const authorized = await GoogleFit.authorize(options);
    if (!authorized.success) {
      throw new Error('Google Fit 認証に失敗しました');
    }
    
    // Store permission status on successful authorization
    await AsyncStorage.setItem(PERMISSIONS_KEY, 'true');
  } catch (error: any) {
    console.error('Google Fit authorization error:', error);
    throw new Error(`Google Fit の接続でエラーが発生しました: ${error.message || 'Unknown error'}`);
  }
}

// --- Android: 当日の歩数取得 ---
export async function getTodayStepsAndroid(): Promise<number> {
  const start = new Date();
  start.setHours(0, 0, 0, 0);
  const end = new Date();
  
  try {
    const res = await GoogleFit.getDailyStepCountSamples({
      startDate: start.toISOString(),
      endDate: end.toISOString()
    }) as StepsResponse[];
    
    // Google Fitからのデータを確認
    console.log('Google Fit steps data:', JSON.stringify(res));
    
    // まず com.google.android.gms.fitness.app.fitnessstats のデータを探す（最も正確）
    let stepsData = res.find(source => source.source === 'com.google.android.gms.fitness.app.fitnessstats');
    
    // なければ他のソースを確認
    if (!stepsData || !stepsData.steps || stepsData.steps.length === 0) {
      stepsData = res.find(source => source.steps && source.steps.length > 0);
    }
    
    // データが見つかればその値を、なければ0を返す
    return stepsData?.steps?.[0]?.value || 0;
  } catch (error: any) {
    console.error('Google Fit steps error:', error);
    throw new Error(`歩数データの取得に失敗しました: ${error.message || 'Unknown error'}`);
  }
}

// Platform-agnostic function to get today's steps
export async function getTodaySteps(): Promise<number> {
  try {
    if (Platform.OS === 'ios') {
      return await getTodayStepsIOS();
    } else {
      return await getTodayStepsAndroid();
    }
  } catch (error) {
    console.error('Error getting today\'s steps:', error);
    return 0;
  }
}
