import { saveBadge } from './badgeService';

/**
 * Phase 2 Special Badge Types
 */
export enum SpecialBadgeType {
  // Â≠£ÁØÄ„Éê„ÉÉ„Ç∏ (Seasonal Badges)
  SPRING_AWAKENING = 'spring_awakening',
  SUMMER_SOLSTICE = 'summer_solstice', 
  AUTUMN_LEAVES = 'autumn_leaves',
  WINTER_WONDER = 'winter_wonder',
  
  // „Çµ„Éó„É©„Ç§„Ç∫„Éê„ÉÉ„Ç∏ (Surprise Badges)
  LUCKY_DAY = 'lucky_day',
  MIDNIGHT_WALKER = 'midnight_walker',
  EARLY_BIRD = 'early_bird',
  RAINY_DAY_HERO = 'rainy_day_hero',
  
  // Ë®òÂøµÊó•„Éê„ÉÉ„Ç∏ (Anniversary Badges)
  BIRTHDAY_SPECIAL = 'birthday_special',
  ONE_MONTH_ANNIVERSARY = 'one_month_anniversary',
  SIX_MONTH_ANNIVERSARY = 'six_month_anniversary',
  ONE_YEAR_ANNIVERSARY = 'one_year_anniversary',
  
  // ÈÄ±Êú´„ÉÅ„É£„É¨„É≥„Ç∏ (Weekend Challenge)
  WEEKEND_WARRIOR = 'weekend_warrior',
  SATURDAY_SPECIAL = 'saturday_special',
  SUNDAY_FUNDAY = 'sunday_funday',
  WEEKEND_STREAK = 'weekend_streak',
}

/**
 * Badge metadata with display information
 */
export interface BadgeMetadata {
  type: string;
  name: string;
  description: string;
  icon: string;
  rarity: 'Common' | 'Rare' | 'Epic' | 'Legendary';
  category: 'Seasonal' | 'Surprise' | 'Anniversary' | 'Weekend' | 'Regular';
}

/**
 * All badge metadata including existing and new badges
 */
export const BADGE_METADATA: Record<string, BadgeMetadata> = {
  // Existing badges
  '7500_steps': {
    type: '7500_steps',
    name: '1Êó•7500Ê≠©ÈÅîÊàê',
    description: '1Êó•„Åß7500Ê≠©‰ª•‰∏äÊ≠©„Åç„Åæ„Åó„Åü',
    icon: 'üèÖ',
    rarity: 'Common',
    category: 'Regular'
  },
  '10000_steps': {
    type: '10000_steps', 
    name: '1Êó•10000Ê≠©ÈÅîÊàê',
    description: '1Êó•„Åß10000Ê≠©‰ª•‰∏äÊ≠©„Åç„Åæ„Åó„Åü',
    icon: 'ü•á',
    rarity: 'Rare',
    category: 'Regular'
  },
  '3days_streak': {
    type: '3days_streak',
    name: '3Êó•ÈÄ£Á∂ö7500Ê≠©ÈÅîÊàê',
    description: '3Êó•ÈÄ£Á∂ö„Åß7500Ê≠©‰ª•‰∏äÊ≠©„Åç„Åæ„Åó„Åü',
    icon: 'üî•',
    rarity: 'Rare',
    category: 'Regular'
  },
  '5days_streak': {
    type: '5days_streak',
    name: '5Êó•ÈÄ£Á∂ö7500Ê≠©ÈÅîÊàê', 
    description: '5Êó•ÈÄ£Á∂ö„Åß7500Ê≠©‰ª•‰∏äÊ≠©„Åç„Åæ„Åó„Åü',
    icon: '‚ö°',
    rarity: 'Epic',
    category: 'Regular'
  },

  // Phase 2: Seasonal Badges
  [SpecialBadgeType.SPRING_AWAKENING]: {
    type: SpecialBadgeType.SPRING_AWAKENING,
    name: 'Êò•„ÅÆÁõÆË¶ö„ÇÅ',
    description: 'Êò•„ÅÆÂ≠£ÁØÄ„Å´ÁâπÂà•„Å™Ê¥ªÂãï„ÇíÈÅîÊàê„Åó„Åæ„Åó„Åü',
    icon: 'üå∏',
    rarity: 'Rare',
    category: 'Seasonal'
  },
  [SpecialBadgeType.SUMMER_SOLSTICE]: {
    type: SpecialBadgeType.SUMMER_SOLSTICE,
    name: 'Â§èËá≥„ÅÆËºù„Åç',
    description: 'Â§è„ÅÆÊúÄ„ÇÇÈï∑„ÅÑÊó•„Å´Á¥†Êô¥„Çâ„Åó„ÅÑÊ¥ªÂãï„Çí„Åó„Åæ„Åó„Åü',
    icon: '‚òÄÔ∏è',
    rarity: 'Epic',
    category: 'Seasonal'
  },
  [SpecialBadgeType.AUTUMN_LEAVES]: {
    type: SpecialBadgeType.AUTUMN_LEAVES,
    name: 'Á¥ÖËëâ„ÅÆÊï£Ê≠©',
    description: 'Áßã„ÅÆÁæé„Åó„ÅÑÂ≠£ÁØÄ„Å´ÂÅ•Â∫∑ÁöÑ„Å™Ê¥ªÂãï„Çí„Åó„Åæ„Åó„Åü',
    icon: 'üçÅ',
    rarity: 'Rare',
    category: 'Seasonal'
  },
  [SpecialBadgeType.WINTER_WONDER]: {
    type: SpecialBadgeType.WINTER_WONDER,
    name: 'ÂÜ¨„ÅÆÂ•áË∑°',
    description: 'ÂØí„ÅÑÂÜ¨„Å´„ÇÇË≤†„Åë„Åö„Å´Ê¥ªÂãï„ÇíÁ∂ö„Åë„Åæ„Åó„Åü',
    icon: '‚ùÑÔ∏è',
    rarity: 'Epic',
    category: 'Seasonal'
  },

  // Phase 2: Surprise Badges
  [SpecialBadgeType.LUCKY_DAY]: {
    type: SpecialBadgeType.LUCKY_DAY,
    name: 'Âπ∏ÈÅã„ÅÆÊó•',
    description: '„É©„É≥„ÉÄ„É†„Å´ÈÅ∏„Å∞„Çå„ÅüÁâπÂà•„Å™Âπ∏ÈÅã„ÅÆÊó•„Åß„Åô',
    icon: 'üçÄ',
    rarity: 'Legendary',
    category: 'Surprise'
  },
  [SpecialBadgeType.MIDNIGHT_WALKER]: {
    type: SpecialBadgeType.MIDNIGHT_WALKER,
    name: 'Â§ú‰∏≠„ÅÆÊï£Ê≠©ËÄÖ',
    description: 'Ê∑±Â§ú0ÊôÇÈ†É„Å´Ê≠©Êï∞„ÇíË®òÈå≤„Åó„Åæ„Åó„Åü',
    icon: 'üåô',
    rarity: 'Epic',
    category: 'Surprise'
  },
  [SpecialBadgeType.EARLY_BIRD]: {
    type: SpecialBadgeType.EARLY_BIRD,
    name: 'Êó©Ëµ∑„Åç„ÅÆÈ≥•',
    description: 'Êúù5ÊôÇÂâç„Å´Ê≠©Êï∞„ÇíË®òÈå≤„Åó„Åæ„Åó„Åü',
    icon: 'üê¶',
    rarity: 'Rare',
    category: 'Surprise'
  },
  [SpecialBadgeType.RAINY_DAY_HERO]: {
    type: SpecialBadgeType.RAINY_DAY_HERO,
    name: 'Èõ®„ÅÆÊó•„ÅÆ„Éí„Éº„É≠„Éº',
    description: 'Èõ®„ÅÆÊó•„Å´„ÇÇÈñ¢„Çè„Çâ„ÅöÁõÆÊ®ô„ÇíÈÅîÊàê„Åó„Åæ„Åó„Åü',
    icon: 'üåßÔ∏è',
    rarity: 'Epic',
    category: 'Surprise'
  },

  // Phase 2: Anniversary Badges
  [SpecialBadgeType.BIRTHDAY_SPECIAL]: {
    type: SpecialBadgeType.BIRTHDAY_SPECIAL,
    name: 'Ë™ïÁîüÊó•„Çπ„Éö„Ç∑„É£„É´',
    description: 'Ë™ïÁîüÊó•„Å´ÂÅ•Â∫∑ÁöÑ„Å™Ê¥ªÂãï„Çí„Åó„Åæ„Åó„Åü',
    icon: 'üéÇ',
    rarity: 'Legendary',
    category: 'Anniversary'
  },
  [SpecialBadgeType.ONE_MONTH_ANNIVERSARY]: {
    type: SpecialBadgeType.ONE_MONTH_ANNIVERSARY,
    name: '1„É∂ÊúàË®òÂøµ',
    description: '„Ç¢„Éó„É™‰ΩøÁî®ÈñãÂßã„Åã„Çâ1„É∂Êúà„ÅåÁµåÈÅé„Åó„Åæ„Åó„Åü',
    icon: 'üìÖ',
    rarity: 'Rare',
    category: 'Anniversary'
  },
  [SpecialBadgeType.SIX_MONTH_ANNIVERSARY]: {
    type: SpecialBadgeType.SIX_MONTH_ANNIVERSARY,
    name: '6„É∂ÊúàË®òÂøµ',
    description: '„Ç¢„Éó„É™‰ΩøÁî®ÈñãÂßã„Åã„Çâ6„É∂Êúà„ÅåÁµåÈÅé„Åó„Åæ„Åó„Åü',
    icon: 'üéä',
    rarity: 'Epic',
    category: 'Anniversary'
  },
  [SpecialBadgeType.ONE_YEAR_ANNIVERSARY]: {
    type: SpecialBadgeType.ONE_YEAR_ANNIVERSARY,
    name: '1Âπ¥Ë®òÂøµ',
    description: '„Ç¢„Éó„É™‰ΩøÁî®ÈñãÂßã„Åã„Çâ1Âπ¥„ÅåÁµåÈÅé„Åó„Åæ„Åó„Åü',
    icon: 'üèÜ',
    rarity: 'Legendary',
    category: 'Anniversary'
  },

  // Phase 2: Weekend Challenge Badges
  [SpecialBadgeType.WEEKEND_WARRIOR]: {
    type: SpecialBadgeType.WEEKEND_WARRIOR,
    name: 'ÈÄ±Êú´Êà¶Â£´',
    description: 'ÈÄ±Êú´„Å´ÁâπÂà•„Å™Ê¥ªÂãï„ÇíÈÅîÊàê„Åó„Åæ„Åó„Åü',
    icon: '‚öîÔ∏è',
    rarity: 'Rare',
    category: 'Weekend'
  },
  [SpecialBadgeType.SATURDAY_SPECIAL]: {
    type: SpecialBadgeType.SATURDAY_SPECIAL,
    name: 'ÂúüÊõúÊó•„Çπ„Éö„Ç∑„É£„É´',
    description: 'ÂúüÊõúÊó•„Å´ÁâπÂà•„Å™„ÉÅ„É£„É¨„É≥„Ç∏„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü',
    icon: 'üéØ',
    rarity: 'Rare',
    category: 'Weekend'
  },
  [SpecialBadgeType.SUNDAY_FUNDAY]: {
    type: SpecialBadgeType.SUNDAY_FUNDAY,
    name: '„Çµ„É≥„Éá„Éº„Éï„Ç°„É≥„Éá„Éº',
    description: 'Êó•ÊõúÊó•„Å´Ê•Ω„Åó„ÅèÊ¥ªÂãï„Åó„Åæ„Åó„Åü',
    icon: 'üéà',
    rarity: 'Rare',
    category: 'Weekend'
  },
  [SpecialBadgeType.WEEKEND_STREAK]: {
    type: SpecialBadgeType.WEEKEND_STREAK,
    name: 'ÈÄ±Êú´ÈÄ£Á∂öÈÅîÊàê',
    description: 'ÈÄ£Á∂ö„Åó„Å¶ÈÄ±Êú´„Å´ÁõÆÊ®ô„ÇíÈÅîÊàê„Åó„Åæ„Åó„Åü',
    icon: 'üî•',
    rarity: 'Epic',
    category: 'Weekend'
  }
};

/**
 * Get badge metadata by type
 */
export function getBadgeMetadata(type: string): BadgeMetadata | null {
  return BADGE_METADATA[type] || null;
}

/**
 * Get all badges by category
 */
export function getBadgesByCategory(category: BadgeMetadata['category']): BadgeMetadata[] {
  return Object.values(BADGE_METADATA).filter(badge => badge.category === category);
}

/**
 * Get all badges by rarity
 */
export function getBadgesByRarity(rarity: BadgeMetadata['rarity']): BadgeMetadata[] {
  return Object.values(BADGE_METADATA).filter(badge => badge.rarity === rarity);
}

/**
 * Check if it's currently a specific season
 */
export function getCurrentSeason(): 'spring' | 'summer' | 'autumn' | 'winter' {
  const month = new Date().getMonth() + 1; // 1-12
  if (month >= 3 && month <= 5) return 'spring';
  if (month >= 6 && month <= 8) return 'summer';
  if (month >= 9 && month <= 11) return 'autumn';
  return 'winter';
}

/**
 * Check if today is weekend
 */
export function isWeekend(): boolean {
  const day = new Date().getDay(); // 0 = Sunday, 6 = Saturday
  return day === 0 || day === 6;
}

/**
 * Get day of week as string
 */
export function getDayOfWeek(): 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' {
  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  return days[new Date().getDay()] as any;
}

/**
 * Special Badge Checker Functions
 */

/**
 * Check for seasonal badges based on current date and activity
 */
export async function checkSeasonalBadges(userId: string, steps: number, date: string): Promise<void> {
  const season = getCurrentSeason();
  const currentDate = new Date();
  
  // Summer Solstice (June 21st) - currently summer
  if (season === 'summer' && steps >= 10000) {
    if (currentDate.getMonth() === 5 && currentDate.getDate() === 21) { // June 21st
      await saveBadge(userId, date, SpecialBadgeType.SUMMER_SOLSTICE);
    } else if (steps >= 7500) {
      // Regular summer badge for good activity
      await saveBadge(userId, date, SpecialBadgeType.SUMMER_SOLSTICE);
    }
  }
  
  // Other seasonal badges based on season and performance
  if (steps >= 8000) {
    switch (season) {
      case 'spring':
        await saveBadge(userId, date, SpecialBadgeType.SPRING_AWAKENING);
        break;
      case 'autumn':
        await saveBadge(userId, date, SpecialBadgeType.AUTUMN_LEAVES);
        break;
      case 'winter':
        await saveBadge(userId, date, SpecialBadgeType.WINTER_WONDER);
        break;
    }
  }
}

/**
 * Check for surprise badges based on random conditions and time
 */
export async function checkSurpriseBadges(userId: string, steps: number, date: string): Promise<void> {
  const currentTime = new Date();
  const hour = currentTime.getHours();
  
  // Early Bird (before 5 AM)
  if (hour < 5 && steps >= 1000) {
    await saveBadge(userId, date, SpecialBadgeType.EARLY_BIRD);
  }
  
  // Midnight Walker (around midnight 11PM-1AM)
  if ((hour >= 23 || hour <= 1) && steps >= 2000) {
    await saveBadge(userId, date, SpecialBadgeType.MIDNIGHT_WALKER);
  }
  
  // Lucky Day (random 5% chance for users with good activity)
  if (steps >= 7500 && Math.random() < 0.05) {
    await saveBadge(userId, date, SpecialBadgeType.LUCKY_DAY);
  }
  
  // Rainy Day Hero (simulate weather check - would integrate with weather API in production)
  // For now, random 10% chance to simulate rainy day
  if (steps >= 7500 && Math.random() < 0.1) {
    await saveBadge(userId, date, SpecialBadgeType.RAINY_DAY_HERO);
  }
}

/**
 * Check for weekend challenge badges
 */
export async function checkWeekendBadges(userId: string, steps: number, date: string): Promise<void> {
  const dayOfWeek = getDayOfWeek();
  
  if (isWeekend()) {
    // Weekend Warrior - high activity on weekend
    if (steps >= 10000) {
      await saveBadge(userId, date, SpecialBadgeType.WEEKEND_WARRIOR);
    }
    
    // Saturday Special
    if (dayOfWeek === 'saturday' && steps >= 8000) {
      await saveBadge(userId, date, SpecialBadgeType.SATURDAY_SPECIAL);
    }
    
    // Sunday Funday  
    if (dayOfWeek === 'sunday' && steps >= 8000) {
      await saveBadge(userId, date, SpecialBadgeType.SUNDAY_FUNDAY);
    }
  }
}

/**
 * Check for anniversary badges based on user registration date
 */
export async function checkAnniversaryBadges(userId: string, userRegistrationDate: Date, date: string): Promise<void> {
  const currentDate = new Date();
  const registrationDate = new Date(userRegistrationDate);
  
  // Calculate time difference
  const timeDiff = currentDate.getTime() - registrationDate.getTime();
  const daysDiff = Math.floor(timeDiff / (1000 * 3600 * 24));
  
  // One month (30 days)
  if (daysDiff >= 30 && daysDiff < 31) {
    await saveBadge(userId, date, SpecialBadgeType.ONE_MONTH_ANNIVERSARY);
  }
  
  // Six months (180 days)
  if (daysDiff >= 180 && daysDiff < 181) {
    await saveBadge(userId, date, SpecialBadgeType.SIX_MONTH_ANNIVERSARY);
  }
  
  // One year (365 days)
  if (daysDiff >= 365 && daysDiff < 366) {
    await saveBadge(userId, date, SpecialBadgeType.ONE_YEAR_ANNIVERSARY);
  }
  
  // Birthday badge (would need user birthday in profile)
  // For now, check if it's a special day in the year
  const month = currentDate.getMonth() + 1;
  const day = currentDate.getDate();
  // Example: If user sets birthday in profile, check against that
  // await saveBadge(userId, date, SpecialBadgeType.BIRTHDAY_SPECIAL);
}

/**
 * Main function to check all Phase 2 special badges
 */
export async function checkAllSpecialBadges(
  userId: string, 
  steps: number, 
  date: string, 
  userRegistrationDate: Date
): Promise<void> {
  try {
    await Promise.all([
      checkSeasonalBadges(userId, steps, date),
      checkSurpriseBadges(userId, steps, date),
      checkWeekendBadges(userId, steps, date),
      checkAnniversaryBadges(userId, userRegistrationDate, date)
    ]);
  } catch (error) {
    console.error('Error checking special badges:', error);
  }
}
